scalar Timestamp

type AuthPayload{
  token: String!
  user: User!
}

type Contact {
  ObjectID: ID
  name1: String!
  name2: String
  surname: String
  email: String
  phone: String
  website: String
  company: String
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

input Filter{
  ObjectID: ID
  name1: String
  name2: String
  surname: String
  email: String
  phone: String
  website: String
  company: String
  createdAt: Timestamp
  updatedAt: Timestamp
}

type User {
  ObjectID: ID
  username: String!
  password: String!
  email: String!
  isAdmin: Boolean!
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

type Mutation {
  createUser(username: String!, email: String!, password1: String!, password2: String!): User
  login(username: String!, password: String!): AuthPayload
  createContact(name1: String!, name2: String, surname: String, email: String, phone: String, website: String, company: String): Contact
}

type Query {
  getContact(filter: Filter): Contact
  getContacts(filter: Filter): [Contact]
  countContacts(filter: Filter): Int!
  searchContacts(query: String!): [Contact]
}

